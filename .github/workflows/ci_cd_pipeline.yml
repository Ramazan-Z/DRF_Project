name: Django_CI/CD
on: [push, pull_request]

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Check out code
              uses: actions/checkout@v3
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8
            - name: Run Flake8
              run: flake8 .

    tests:
        runs-on: ubuntu-latest
        needs: lint
        steps:
            - name: Check out code
              uses: actions/checkout@v3
            - name: Set up python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"
            - name: Start redis
              uses: supercharge/redis-github-action@1.7.0
              with:
                  redis-version: "latest"
            - name: Install poetry
              run: |
                  curl -sSL https://install.python-poetry.org | python3 -
                  echo "$HOME/.local/bin" >> $GITHUB_PATH
            - name: Install dependencies
              run: poetry install
            - name: Make envfile
              uses: SpicyPizza/create-envfile@v2.0
              with:
                  envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  envkey_DEBUG: ${{ secrets.DEBUG }}
                  envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                  envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  envkey_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
                  envkey_POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
                  envkey_STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
                  envkey_REDIS_LOCATION: ${{ secrets.REDIS_LOCATION }}
                  envkey_EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
                  envkey_EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
                  envkey_EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
                  envkey_EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
                  envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
                  envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
                  fail_on_empty: true
            - name: Run tests
              run: poetry run python manage.py test
    deploy:
        runs-on: ubuntu-latest
        needs: tests
        steps:
            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}
            - name: Copy project files to server
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                    git pull
                  EOF
            - name: Install dependencies on server
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                    cd ${{ secrets.DEPLOY_DIR }}
                    export PATH="/root/.local/bin:$PATH"
                    poetry shell
                    poetry install
                  EOF
            - name: Apply migrations on server
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                    cd ${{ secrets.DEPLOY_DIR }}
                    export PATH="/root/.local/bin:$PATH"
                    poetry shell
                    python3 manage.py migrate
                  EOF
            - name: Collect static files on server
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                    cd ${{ secrets.DEPLOY_DIR }}
                    export PATH="/root/.local/bin:$PATH"
                    poetry shell
                    python3 manage.py collectstatic --noinput
                  EOF
            - name: Restart application
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                    sudo systemctl restart drf_project.service
                  EOF
